@model IEnumerable<Net_Gis_Falcon.Respuestum>

@{
    ViewData["Title"] = "Index";
}

@{var nivel = 0;}

<h1>Arbol de respuestas</h1>

        @{sacarPadre2(null); }

<h1>Respuestas</h1>

<p>
    <a asp-action="Create">Crear una nueva respuesta</a>
</p>
<table class="table">
    <thead class="thead-dark">
        <tr>
            <th>Cuerpo de la respuesta </th>
            <th>¿Es principal? </th>
            <th>Nivel</th>
            <th>Respuesta del padre</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CuerpoRespuesta)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Principal)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NivelNavigation.DescripcionPregunta)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RespuestaPadreNavigation.CuerpoRespuesta)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.IdRespuesta">Editar</a> |
                    <a asp-action="Details" asp-route-id="@item.IdRespuesta">Detalles</a> |
                    <a asp-action="Delete" asp-route-id="@item.IdRespuesta">Eliminar</a>
                </td>
            </tr>
        }
    </tbody>

</table>
@functions{
  
    void sacarPadre2(Respuestum item )
    {
        <ul id="myUL">
            <ul class="nested">
                @if (item == null)
                {
                    bool primero = true;
                    @foreach (var prueba in Model)
                    {
                        if (prueba.Principal == true)
                        {
                            if (primero)
                            {
                        <li style="list-style-type:none; font-weight:bold; font-size: 22px" >
                                @Html.DisplayFor(modelItem => prueba.NivelNavigation.DescripcionPregunta)
                         </li>                
                                primero = false;
                            }
                            <li class="caret">@Html.DisplayFor(modelItem => prueba.CuerpoRespuesta)</li>
                            //Preguntarle por los hijos, de manera recursiva

                            sacarPadre2(prueba); //Añadirle valor de nivel, al pasar argumentos, hacer +1 al nivel
                        }
                    }
                }

                else
                {
                    @if (item.InverseRespuestaPadreNavigation.Count != 0)
                    {
                        <li style= "list-style-type:none; font-weight:bold; font-size: 22px">
                            @Html.DisplayFor(modelItem => item.InverseRespuestaPadreNavigation.ToArray()[0].NivelNavigation.DescripcionPregunta)
                        </li>
                    }

                    @foreach (var hijos in item.InverseRespuestaPadreNavigation)
                    {
                        <li class="caret">@Html.DisplayFor(modelItem => hijos.CuerpoRespuesta)</li>
                        //Preguntarle por los hijos, de manera recursiva

                        sacarPadre2(hijos); //Añadirle valor de nivel, al pasar argumentos, hacer +1 al nivel

                    }
                }
            </ul>
        </ul>
    }
}